#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Set program name and version.

TOOL_NAME="Nitrux Update Tool System"
COMP_NAME="(Update Component)"
CRU_VERSION="$(md5sum /usr/bin/nuts-cru | cut -c -32)"


# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print error messages to stderr.

puts_error() {
	if [ -n "$1" ]; then
		printf "%s: \e[31mError:\e[0m %b\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print messages or text using multiple lines to stderr.

print_message() {
	if [ -n "$1" ]; then
		printf "%s\n" "$@" >&2
	fi
}


# -- Display version of running component.

puts_info "$TOOL_NAME $COMP_NAME version $CRU_VERSION."


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 – ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts_error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts_success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Functions.

dl_file() {
    local FILE_URL="$1"
    local FILE_NAME
    FILE_NAME=$(basename "$FILE_URL")
    local FILE_PATH="/tmp/$FILE_NAME"

    [ -f "$FILE_PATH" ] && rm "$FILE_PATH"

    if ! command -v axel >/dev/null 2>&1; then
        puts_error "axel command not found, unable to download file."
        return 1
    fi

    if ! curl --output /dev/null --silent --head --fail "$FILE_URL"; then
        puts_error "File URL is not accessible, unable to download file."
        return 1
    fi

    if ! axel -o "/tmp" -n 10 "$FILE_URL"; then
        puts_error "Failed to download file."
        return 1
    fi
}

bak_cc() {
    UPDATE_DELETES_BACKUPS=$(grep '^UPDATE_DELETES_BACKUPS=' /etc/nuts.conf | cut -d'=' -f2)

    if [ "$UPDATE_DELETES_BACKUPS" != "yes" ]; then
        return 0
    fi

    if [ ! -d "$NUTS_DIR_BAK" ]; then
        return 1
    fi

    if ! [[ "$BACKUPS_TO_KEEP" =~ ^[0-9]+$ ]]; then
        return 1
    fi

    find "$NUTS_DIR_BAK" -maxdepth 1 -type f -exec rm {} +
    find "$NUTS_DIR_BAK" -maxdepth 1 -type f | sort -r | tail -n +$((BACKUPS_TO_KEEP + 1)) | xargs --no-run-if-empty rm
}

unmount_directory() {
  local DIRECTORY="$1"

  if mountpoint -q "$DIRECTORY"; then
    puts_info "Unmounting: $DIRECTORY"
    umount "$DIRECTORY"
  else
    puts_info "Directory is not mounted: $DIRECTORY"
  fi
}

unmount_on_failure() {
    unmount_directory "/home" || { puts_error "Failed to unmount /home."; }
    unmount_directory "/dev" || { puts_error "Failed to unmount /dev."; }
    exit 1
}

spinner() {
    local pid=$!
    local delay=0.1
    local spinstr='▖▘▝▗'
    local elapsed=0

    while ps a | awk '{print $1}' | grep -q "$pid"; do
        local temp=${spinstr#?}
        printf " [%c]  Elapsed time: %s seconds" "$spinstr" "$elapsed"
        spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        elapsed=$(echo "$elapsed + $delay" | bc)
        printf "\r"
    done
    printf "\n"
}


# -- Variables.

CURRENT_DIST=$(awk -F'=' '/VERSION_CODENAME/{print $NF}' /etc/os-release)

#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		-v | --version)
			print_message "$TOOL_NAME" \
				"" \
				"Version $COMP_NAME: $CRU_VERSION." \
				"" \
				"The license used for this file and its contents is: BSD-3-Clause." \
				"" \
				"Authors:" \
				"" \
				"    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>" \
				"" \
				"(c) $FECHA Some Rights Reserved. Made by $VENDOR"

			exit
			;;
	esac
done


# -- Mount the devices filesystem.
# -- Check if /dev is already mounted.

if mountpoint -q /dev; then
    puts_info "/dev is already mounted. Unmounting..."
    umount /dev
fi

puts_info "Mounting /dev..."
mount -t devtmpfs dev /dev


# -- Mount NX_HOME partition.
# -- When entering the chroot, only the root partition is mounted, but that's likely to not have enough storage.
# -- So, let's use the /home partition. We're discovering NX_HOME by the LABEL of the partition.

HOME_PARTITION=$(findfs LABEL=NX_HOME)

if mountpoint -q /home; then
    puts_info "/home is already mounted. Unmounting..."
    umount /home
fi

puts_info "Mounting $HOME_PARTITION to /home..."
mount -t auto "$HOME_PARTITION" /home


# -- Create the directories for nuts.
# -- Create working directories in /home since this partition will likely have more space than the root partition.

DIRECTORIES=("$NUTS_DIR_BAK" "$NUTS_DIR_XFS" "$NUTS_DIR_DLS" "$NUTS_DIR_SQS")

for DIR in "${DIRECTORIES[@]}"; do
  if [[ ! -d "$DIR" ]]; then
    puts_error "Directory '$DIR' does not exist. Creating the directory..."
    if ! mkdir -p "$DIR"; then
      puts_error "Failed to create directory '$DIR', quitting."
      unmount_on_failure
    fi
    puts_info "Directory '$DIR' created successfully."
  fi
done

puts_info "All required directories exist, continuing..."


# -- Run the backup cleaner.
# -- Only keep the amount of backups defined in nuts.conf.

puts_info "Cleaning older backups, continuing..."
bak_cc


# -- Create the backup using SquashFS.
# -- We assume that the /home partition is on an internal storage device (SATA or NVME), but one can never know, so run sync to flush the write cache.
# -- To exclude a file specifiy the full path, i.e., /etc/shadow
# -- To exclude a directory and its contents specify the path of the directory, i.e., /home/
# -- To include a directory but exclude its contents specify the path of the directory and use an asterisk, i.e., /home/*
# -- To include a directory and its contents or a file, don't add either to the list.

puts_info "Creating backup of ${CURRENT_DIST^}, continuing..."

BACKUP_FILE="$NUTS_DIR_BAK/nuts-backup-$DATE_BACKUP_FILE.squashfs"

mksquashfs / "$BACKUP_FILE" \
	-quiet \
	-not-reproducible \
	-e /boot/* \
	-e /dev/* \
	-ef /etc/shadow \
	-e /home/ \
	-e /proc/ \
	-e /run/* \
	-e /sys/* \
	-e /tmp/* \
	-e /var/{cache,lib,local,lock,log,mail,opt,run,spool,tmp}/ \
	-comp zstd \
	-Xcompression-level 22 \
	-b 1048576

md5sum "$BACKUP_FILE" > "$NUTS_DIR_BAK/nuts-backup.md5sum"

sync

puts_success "Success! Backup has been created."


# -- Download the OTA SquashFS with axel.
# -- Check if the OTA SquashFS already exists so it's not downloaded again. If an OTA file was downloaded then rename it.
# -- However, If the OTA file found doesn't match the checksum in nuts-query.info, it will still cause the utility to exit at a later stage.
# -- Use the list of mirrors from the query file, or exit if downloading the file from all mirrors fails.

OTA_FILE="$NUTS_DIR_DLS/nuts-ota.squashfs"

if [[ -f "$OTA_FILE" ]]; then
    puts_info "OTA file found, skipping..."
else
    puts_info "OTA file not found! Downloading OTA file, continuing..."
    MIRROR_LIST=$(grep 'MIRRORLIST=' /tmp/nuts-query.info | sed -e 's/[^=]*=//' -e 's/,/ /g')
    DOWNLOAD_SUCCESS=false
    for MIRROR_URL in $MIRROR_LIST; do
        puts_info "Trying mirror URL: $MIRROR_URL"
        axel -q -n 10 -o "$OTA_FILE" "$MIRROR_URL" &
        spinner
        wait $!

        if ! wait $!; then
            puts_error "Download from $MIRROR_URL failed. Trying the next mirror..."
        else
            puts_success "Success! OTA update download completed, continuing..."
            DOWNLOAD_SUCCESS=true
            break
        fi
    done

    if [ "$DOWNLOAD_SUCCESS" = false ]; then
        puts_error "Download failed from all mirrors, quitting."
        unmount_on_failure
    fi
fi


# -- Verify the checksum of the OTA file. Use the checksum from the query file.
# -- Exit if checksum doesn't match.

LOCAL_OTA_SUM=$(md5sum "$NUTS_DIR_DLS"/nuts-ota.squashfs | awk '{ print $1 }')
NQ_OTA_SUM=$(grep -oP '(?<=OTASUM=)[a-f0-9]{32}' /tmp/nuts-query.info)

if [[ "$LOCAL_OTA_SUM" == "$NQ_OTA_SUM" ]]; then
    puts_info "OTA file checksum matches, continuing..."
else
    puts_error "OTA file checksum does not match, deleting file..."
    rm "$NUTS_DIR_DLS"/nuts-ota.squashfs
    puts_error "Mismatched OTA file deleted; reboot and try to update again. Quitting."
    unmount_on_failure
fi


# -- Mount the OTA SquashFS.

mount "$NUTS_DIR_DLS"/nuts-ota.squashfs "$NUTS_DIR_SQS"


# -- Now comes the good part; update the current installation.
# -- Specify data archive when upgrading using the same version set as the minimum target in nuts-query.
# -- We assume that VAR_DATA_TARGET will match MINTARGET in nuts-query.conf since we've already done a test in the main component.

puts_info "Updating ${CURRENT_DIST^}, continuing..."

APPIMAGE_URL="https://raw.githubusercontent.com/UriHerrera/storage/master/AppImages/dpkg-1.19.7-x86_64.AppImage"
AIFILE_DL_PATH="/tmp/dpkg-1.19.7-x86_64.AppImage"
AIPKG_MANAGER="/tmp/pkgman"

VAR_DATA_TARGET=$(grep 'MINTARGET=' /tmp/nuts-query.info | cut -d'=' -f2)
VAR_DATA_URL="https://raw.githubusercontent.com/Nitrux/storage/master/Other/var-lib-dpkg-$VAR_DATA_TARGET.tar.xz"
TARFILE_DL_PATH="/tmp/var-lib-dpkg-$VAR_DATA_TARGET.tar.xz"

if [[ -f "$AIPKG_MANAGER" ]]; then
    puts_info "$AIPKG_MANAGER already exists, skipping download."
else
    if dl_file "$APPIMAGE_URL" > "$AIFILE_DL_PATH" && \
       [[ $(file --mime-type -b "$AIFILE_DL_PATH") == "application/x-executable" ]] && \
       mv "$AIFILE_DL_PATH" "$AIPKG_MANAGER" && chmod +x "$AIPKG_MANAGER"; then
        puts_info "AppImage downloaded and processed successfully, continuing..."
    else
        puts_error "Failed to download or process the AppImage, quitting."
        [[ -f "$AIPKG_MANAGER" ]] && rm "$AIPKG_MANAGER"
        unmount_on_failure
    fi
fi

ln -svf "$AIPKG_MANAGER" /usr/bin/dpkg > /dev/null 2>&1

puts_info "Fetching system data archive, continuing..."

[[ -f "$TARFILE_DL_PATH" ]] && rm "$TARFILE_DL_PATH"

if dl_file "$VAR_DATA_URL" > "$TARFILE_DL_PATH" && \
   mkdir -p /var/lib/dpkg && \
   (cd / && tar -xf "$TARFILE_DL_PATH") && \
   [ -f /var/lib/dpkg/status ]; then
    puts_success "Success! Data archive downloaded and extracted successfully, continuing..."
else
    puts_error "Failed to download or extract the data archive, quitting."
    [[ -f "$TARFILE_DL_PATH" ]] && rm "$TARFILE_DL_PATH"
    unmount_on_failure
fi

puts_info "Proceed to apply OTA update, continuing..."

find "${NUTS_DIR_SQS}/ota/updates/" -name '*.deb' -exec sh -c "DEBIAN_FRONTEND=noninteractive $AIPKG_MANAGER --force-all -i \"\$0\"" {} \; > /dev/null 2>&1 &
spinner
wait $!

if ! wait $!; then
    puts_error "Failed to apply OTA update, quitting."
    unmount_on_failure
fi

puts_success "Success! OTA update process completed successfully, continuing..."

[[ -f "$AIPKG_MANAGER" ]] && rm "$AIPKG_MANAGER"


# -- Clean up the updated root after updating.

puts_info "Calling the $TOOL_NAME $COMP_NAME Cleanup Crew, continuing..."

CLEANUP_SCRIPT_URL="https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/nuts-ccu"

dl_file "$CLEANUP_SCRIPT_URL" >/tmp/nuts-ccu || { puts_error "Failed to download the cleanup script, quitting." ; exit 1; }

if chmod +x /tmp/nuts-ccu && bash /tmp/nuts-ccu ; then
    puts_success "Success! Cleanup script executed without problems, continuing..."
else
    puts_error "Something failed in the cleanup script, quitting." 
    unmount_on_failure
fi

rm -f /tmp/nuts-ccu


# -- Unmount directories after update and before exiting chroot.

unmount_directory "$NUTS_DIR_SQS"
unmount_directory "/home"
unmount_directory "/dev"


# -- **DO NOT PERFORM ANY FILE OPERATION AFTER THIS POINT**

sync


# -- Finalizing.
# -- Leave the Matri... I mean, the overlay.

REBOOT_SECONDS=5

puts_info "Rebooting to load changes into overlay in $REBOOT_SECONDS seconds. Bye."

sleep $REBOOT_SECONDS

reboot

#   ====== END ======
