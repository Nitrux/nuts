#!/bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
BKCP_VERSION="$(md5sum /usr/bin/nuts-crr | cut -c -32)"


# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print error messages to stderr.

puts_error() {
	if [ -n "$1" ]; then
		printf "%s: \e[31mError:\e[0m %b\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print messages or text using multiple lines to stderr.

print_message() {
	if [ -n "$1" ]; then
		printf "%s\n" "$@" >&2
	fi
}


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 â€“ ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts_error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts_success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Functions.

dl_file() {
    local FILE_URL="$1"
    local FILE_NAME
    FILE_NAME=$(basename "$FILE_URL")
    local FILE_PATH="/tmp/$FILE_NAME"

    [ -f "$FILE_PATH" ] && rm "$FILE_PATH"

    if ! command -v axel >/dev/null 2>&1; then
        puts_error "axel command not found, unable to download file."
        return 1
    fi

    if ! curl --output /dev/null --silent --head --fail "$FILE_URL"; then
        puts_error "File URL is not accessible, unable to download file."
        return 1
    fi

    if ! axel -o "/tmp" -n 10 "$FILE_URL"; then
        puts_error "Failed to download file."
        return 1
    fi
}


unmount_directory() {
  local DIRECTORY="$1"

  if mountpoint -q "$DIRECTORY"; then
    puts_info "Unmounting: $DIRECTORY"
    umount "$DIRECTORY"
  else
    puts_info "Directory is not mounted: $DIRECTORY"
  fi
}


# -- Mount the devices filesystem.
# -- Check if /dev is already mounted.

if mountpoint -q /dev; then
    puts_info "/dev is already mounted. Unmounting..."
    umount /dev
fi

puts_info "Mounting /dev..."
mount -t devtmpfs dev /dev


# -- Mount NX_HOME partition.
# -- When entering the chroot, only the root partition is mounted, but that's likely to not have enough storage.
# -- So, let's use the /home partition. We're discovering NX_HOME by the LABEL of the partition.

HOME_PARTITION=$(findfs LABEL=NX_HOME)

if mountpoint -q /home; then
    puts_info "/home is already mounted. Unmounting..."
    umount /home
fi

puts_info "Mounting $HOME_PARTITION to /home..."
mount -t auto "$HOME_PARTITION" /home


# -- Variables.

CURRENT_DIST=$(awk -F'=' '/VERSION_CODENAME/{print $NF}' /etc/os-release)
TARGET_DIST="nitrux"
OUTPUT_FILE=$(mktemp)

#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		-v | --version)
			print_message "$TOOL_NAME" \
				"" \
				"Version (backup component): $BKCP_VERSION." \
				"" \
				"The license used for this file and its contents is: BSD-3-Clause." \
				"" \
				"Authors:" \
				"" \
				"    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>" \
				"" \
				"(c) $FECHA Some Rights Reserved. Made by $VENDOR"

			exit
			;;
	esac
done


# -- Create the directories for nuts.
# -- Create working directories in /home since this partition will likely have more space than the root partition.

DIRECTORIES=("$NUTS_DIR_BAK" "$NUTS_DIR_ISO" "$NUTS_DIR_DLS" "$NUTS_DIR_SQS")

for DIR in "${DIRECTORIES[@]}"; do
  if [[ ! -d "$DIR" ]]; then
    puts_error "Directory '$DIR' does not exist. Creating the directory..."
    if ! mkdir -p "$DIR"; then
      puts_error "Failed to create directory '$DIR'. Exiting..."
      exit 1
    fi
    puts_info "Directory '$DIR' created successfully."
  fi
done

puts_info "All required directories exist. Continuing."


# -- Verify the checksum of the backup file with the generated checksum file.
# -- Exit if checksum doesn't match.

BACKUP_SUM=$(md5sum "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" | cut -c -32)

if [[ -f "$NUTS_DIR_BAK/nuts-backup.md5sum" ]]; then
    GEN_BAK_SUM=$(tail "$NUTS_DIR_BAK/nuts-backup.md5sum" | cut -c -32)

    if [[ "$BACKUP_SUM" == "$GEN_BAK_SUM" ]]; then
        puts_info "Backup checksum matches, continuing..."
    else
        puts_error "Backup checksum does not match, quitting."
        exit 1
    fi
else
    puts_error "Backup checksum does not exist, quitting."
    exit 1
fi


# -- Mount the SquashFS.
# -- **ALWAYS** use the newest SquashFS in the directory. The user can't select which backup to restore.

mount "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" "$NUTS_DIR_SQS" >"$OUTPUT_FILE" || { puts_error "Failed to mount SquashFS file, quitting."; exit 1; }


# -- Check that the backup is not the same as the current installation.
# -- If the checksum matches, exit because the root had been restored in a previous run. There's no point in restoring the *same* root.
# -- If the checksum doesn't match, continue because the root differs from the backup's contents and is potentially newer.

LOCAL_SUM=$(md5sum /installed_pkgs_end.txt | cut -c -32)
BACKUP_LIST_SUM=$(md5sum "$NUTS_DIR_SQS"/installed_pkgs_end.txt | cut -c -32)

if [ "$LOCAL_SUM" == "$BACKUP_LIST_SUM" ]; then
  puts_info "The current installation of ${TARGET_DIST^} is the same as the backup, quitting."
  unmount_directory "$NUTS_DIR_SQS" >"$OUTPUT_FILE"
  unmount_directory "/home" >"$OUTPUT_FILE"
  unmount_directory "/dev" >"$OUTPUT_FILE"
  exit 0
else
  puts_info "Preparing to restore ${TARGET_DIST^}, continuing..."
fi


# -- Now comes the good part; proceed with running rsync and restore the backup.

puts_info "Restoring backup of ${CURRENT_DIST^}, continuing..."

dl_file "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/rsync-exclude.list" >"$OUTPUT_FILE"

SOURCE_DIR="$NUTS_DIR_SQS"
DESTINATION_DIR="/"
EXCLUDES_FILE="/tmp/rsync-exclude.list"

RSYNC_COMMAND="stdbuf -oL rsync -aDHAXrh --numeric-ids --delete --force --info=progress2 --progress --exclude-from=$EXCLUDES_FILE $SOURCE_DIR/ $DESTINATION_DIR"
eval "$RSYNC_COMMAND" | {
  while IFS= read -r line; do
    echo -ne "\rProgress: $line\033[K"
  done
  echo -e "\n"
}

sync

puts_success "Success! Backup has been restored."


# -- Do a cleanup of the synced root.

puts_info "Calling the $TOOL_NAME Cleanup Crew, continuing..."

CLEANUP_SCRIPT_URL="https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/nuts-ccr"
FILE_LIST_URL="https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/nuts-cc-file.list"

dl_file "$CLEANUP_SCRIPT_URL" >"$OUTPUT_FILE" || { puts_error "Failed to download the cleanup script, quitting."; exit 1; }
dl_file "$FILE_LIST_URL" >"$OUTPUT_FILE" || { puts_error "Failed to download the file list, quitting."; exit 1; }

if chmod +x /tmp/nuts-ccr && bash /tmp/nuts-ccr >"$OUTPUT_FILE"; then
    puts_success "Cleanup script executed successfully."
else
    puts_error "Something failed in the cleanup script, quitting."
    exit 1
fi

rm -f /tmp/nuts-ccr


# -- Update GRUB.

update-grub >"$OUTPUT_FILE" 2>&1


# -- Unmount all the stuff.

unmount_directory "$NUTS_DIR_SQS" >"$OUTPUT_FILE"
unmount_directory "/home" >"$OUTPUT_FILE"
unmount_directory "/dev" >"$OUTPUT_FILE"


# -- **DO NOT PERFORM ANY FILE OPERATION AFTER THIS POINT**

sync


# -- Finalizing.
# -- Leave the Matri... I mean, the overlay.

exit

#   ====== END ======
