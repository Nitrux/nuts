#!/bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Set program name and version.

TOOL_NAME="Nitrux Update Tool System"
COMP_NAME="(Cleanup Component)"
CCU_VERSION="$(md5sum /tmp/nuts-ccu | cut -c -32)"

# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Display version of running component.

puts_info "$TOOL_NAME $COMP_NAME version $CCU_VERSION."


# --  Functions.

create_symlink() {
    local source="$1"
    local destination="$2"

    ln -svf "$source" "$destination" > /dev/null 2>&1
}

dl_file() {
    local FILE_URL="$1"
    local FILE_NAME
    FILE_NAME=$(basename "$FILE_URL")
    local FILE_PATH="/tmp/$FILE_NAME"

    [ -f "$FILE_PATH" ] && rm "$FILE_PATH"

    if ! command -v axel >/dev/null 2>&1; then
        puts_error "axel command not found, unable to download file."
        return 1
    fi

    if ! curl --output /dev/null --silent --head --fail "$FILE_URL"; then
        puts_error "File URL is not accessible, unable to download file."
        return 1
    fi

    if ! axel -o "/tmp" -n 10 "$FILE_URL"; then
        puts_error "Failed to download file."
        return 1
    fi
}

download_appimage() {
    local name="$1"
    local url="$2"
    local destination="/Applications/$name"

    rm -f "$destination"
    axel -a -q -k -U "$user_agent" -n 8 "$url" -o "$destination"
    chmod +x "$destination"
}

download_binary() {
    local name="$1"
    local url="$2"
    local destination="/usr/bin/$name"
    
    rm -f "$destination"
    axel -a -q -k -U "$user_agent" -n 8 "$url" -o "$destination"
    chmod +x "$destination"
}

spinner() {
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    local elapsed=0

    while ps a | awk '{print $1}' | grep -q "$pid"; do
        local temp=${spinstr#?}
        printf " [%c]  Elapsed time: %s seconds" "$spinstr" "$elapsed"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        elapsed=$(echo "$elapsed + $delay" | bc)
        printf "\r"
    done
    printf "\n"
}

#   ====== START ======

############################################################################################################
#   Start of misc-fixes and edit-conf from iso-tool                                                        #
#   When updating packages the stuff below will be overwritten, thus we must apply changes from iso-tool   #
############################################################################################################

#	Also link the library files for cask to launch because maui-shell and cask-server used Jammy for compilation, and the frameworks used Debian.
#	KDE PIM libraries were renamed to different SO names because of course they were. Update the links on every new KF5 release.

KDEPIM_LIB="5.24.5"
KF5_LIB="5.114.0"

create_symlink /usr/lib/x86_64-linux-gnu/libKPim5EventViews.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5EventViews.so.5abi1
create_symlink /usr/lib/x86_64-linux-gnu/libKPim5CalendarSupport.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5CalendarSupport.so.5abi1
create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiCalendar.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiCalendar.so.5abi1
create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiWidgets.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiWidgets.so.5abi1
create_symlink /usr/lib/x86_64-linux-gnu/libKPim5AkonadiCore.so.$KDEPIM_LIB /usr/lib/x86_64-linux-gnu/libKF5AkonadiCore.so.5abi2
create_symlink /usr/lib/x86_64-linux-gnu/libKF5CalendarCore.so.$KF5_LIB /usr/lib/x86_64-linux-gnu/libKF5CalendarCore.so.5abi2


#	Add link for applet window buttons.
#	NOTE: Update the link on every new release of Plasma.

PLASMA_LIB="5.27.10"

create_symlink /usr/lib/x86_64-linux-gnu/libkdecorations2private.so.$PLASMA_LIB /usr/lib/x86_64-linux-gnu/libkdecorations2private.so.9


#   Check session set in SDDM.

if grep -q '^Session=plasma$' /etc/sddm.conf.d/kde_settings.conf; then
    puts_info "Detected graphical session set to Plasma (X11) in SDDM, leaving session file unchanged, continuing..."
elif grep -q '^Session=plasmawayland$' /etc/sddm.conf.d/kde_settings.conf; then
    if [ -f /usr/share/xsessions/plasma.desktop ]; then
        mv /usr/share/xsessions/plasma.desktop /usr/share/xsessions/orig.plasma.desktop.bak
    fi
else
    puts_info "Detected graphical session set to Plasma (Wayland) in SDDM, renaming X session file, continuing..."
fi


#   Replace this line in mkinitramfs so it shuts up about dpkg.

sed -i "s+DPKG_ARCH=\$(dpkg --print-architecture)+DPKG_ARCH=\$(uname -m | sed \"s/x86_64/amd64/\")+g" /usr/sbin/mkinitramfs


#   Change path where NetworkManager saves wireless connections.

echo -e "\n[keyfile]\npath=/var/lib/NetworkManager" | tee -a /etc/NetworkManager/NetworkManager.conf > /dev/null 2>&1


#	Add variable to PAM for Firefox to work with touchscreens in Wayland.

sed -i "$ a \  " /etc/security/pam_env.conf
sed -i "$ a #  Make Firefox work with touchscreens in Wayland" /etc/security/pam_env.conf
sed -i "$ a MOZ_ENABLE_WAYLAND DEFAULT=0 OVERRIDE=1" /etc/security/pam_env.conf


# -- Downloaded these files so they overwrite the files from Debian.

puts_info "Updating misc. and configuration files, continuing..."

declare -A FILES_TO_DOWNLOAD=(
    #   Replace user-setup-apply so that it shuts up about dpkg.
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/scripts/others/user-setup-apply"]="/usr/lib/user-setup/user-setup-apply"
    #   Replace update-grub with our version that doesn't break OUR stuff.
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/scripts/others/update-grub"]="/usr/sbin/update-grub"
    #   Replace /usr/lib/grub/grub-sort-version with a version that doesn't use apt.pkg do it can generate a usable boot menu.
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/grub_files/grub-sort-version"]="/usr/lib/grub/grub-sort-version"
    #	Replace dnscrypt-proxy default configuration.
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/other/dnscrypt-proxy-settings/dnscrypt-proxy.toml"]="/etc/dnscrypt-proxy/dnscrypt-proxy.toml"
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/other/dnscrypt-proxy-settings/public-resolvers.md"]="/var/cache/dnscrypt-proxy/public-resolvers.md"
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/other/dnscrypt-proxy-settings/public-resolvers.md.minisig"]="/var/cache/dnscrypt-proxy/public-resolvers.md.minisig"
    #	Replace common-password.
    #	Increase size of hashing rounds in /etc/pam.d/common-password. See https://cisofy.com/lynis/controls/AUTH-9230/
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/other/common-password"]="/etc/pam.d/common-password"
    #	Add pwquality.conf (which is missing for some reason!).
    ["https://raw.githubusercontent.com/Nitrux/iso-tool/legacy/configs/files/conf/pwquality.conf"]="/etc/security/pwquality.conf"
    #   Replace build list.
    #   Ensure it is the build list for the target update. It should match the checksum of ROOTLISTSUM in nuts.conf.
    ["https://raw.githubusercontent.com/Nitrux/storage/master/Lists/3.2.1/nitrux-nx-desktop-plasma-2bcfb28b-amd64.buildlist"]="/installed_pkgs_end.txt"
)

for URL in "${!FILES_TO_DOWNLOAD[@]}"; do
    dl_file "$URL" > /dev/null 2>&1 &
    spinner
    wait $!

    if ! wait $!; then
        puts_error "Failed to download file(s), quitting."
        exit 1
    fi

    FILE_NAME=$(basename "$URL")
    DOWNLOADED_FILE="/tmp/$FILE_NAME"
    TARGET_PATH="${FILES_TO_DOWNLOAD[$URL]}"

    if [ -f "$DOWNLOADED_FILE" ]; then
        mv "$DOWNLOADED_FILE" "$TARGET_PATH"

        if [[ "$TARGET_PATH" == "/usr/lib/user-setup/user-setup-apply" || 
              "$TARGET_PATH" == "/usr/sbin/update-grub" || 
              "$TARGET_PATH" == "/usr/lib/grub/grub-sort-version" ]]; then
            chmod +x "$TARGET_PATH"
        fi
    else
        puts_error "Downloaded file(s) not found after download, quitting."
        exit 1
    fi
done

puts_success "Success! misc. and configuration files have been updated, continuing..."

######################################################
#   End of misc-fixes and edit-conf from iso-tool    #
######################################################


######################################################
#   Start of update AppImages and static binaries    #
######################################################

puts_info "Updating system AppImages and static binaries, continuing..."

user_agent="BrightSign/8.2.55.5 (XT1144) Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.3 Chrome/69.0.3497.128 Safari/537.36"

latest_release_url=$(curl -sL "https://api.github.com/repos/linuxhw/hw-probe/releases/tags/1.6" | grep -oE 'https://github.com/linuxhw/hw-probe/releases/download/1.6/hw-probe.*x86_64.AppImage' | head -n 1)

filename=$(basename "$latest_release_url")

download_appimage "$filename" "$latest_release_url" &
spinner
mv /Applications/hw-probe-* /Applications/hw-probe

latest_release_url=$(curl -sL https://api.github.com/repos/srevinsaju/Firefox-Appimage/releases/tags/firefox | grep -oE 'https://github.com/srevinsaju/Firefox-Appimage/releases/download/firefox/firefox.*x86_64.AppImage' | head -n 1)

filename=$(basename "$latest_release_url")

download_appimage "$filename" "$latest_release_url" &
spinner
mv /Applications/firefox-* /Applications/firefox

download_appimage "appimaged" "https://github.com/AppImage/appimaged/releases/download/continuous/appimaged-x86_64.AppImage" &
spinner
mv /Applications/appimaged /etc/skel/.local/bin

download_binary "zap" "https://github.com/srevinsaju/zap/releases/download/continuous/zap-amd64" &
spinner

puts_success "System AppImages and static binaries have been updated, continuing..."

####################################################
#   Enf of update AppImages and static binaries    #
####################################################


# -- Link kernel image to newer kernel.

#<!> -- Remove code since we're not including the kernel in the archive, and we expect users to use Kernel Boot to use other kenels. -- <!>


# -- Update GRUB.

if update-grub; then
    puts_success "Success! GRUB menu was updated, continuing..."
else
    puts_error "Failed to update GRUB menu, quitting."
    exit 1
fi

#   ====== END ======
