#! /bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#   Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>                                                                                                                 #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -xe


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
TOOL_SHRT_NAME="nuts"


# -- Print informative messages to stdin.

puts-info () { printf "$TOOL_SHRT_NAME: \e[34mInfo:\e[0m %b\n\n" "$*"; }


# -- Print success messages to stdin.

puts-success () { printf "$TOOL_SHRT_NAME: \e[32mSuccess:\e[0m %b\n\n" "$*"; }


# -- Print error messages to stdin.

puts-error () { printf "$TOOL_SHRT_NAME: \e[31mError:\e[0m %b\n\n" "$*"; }


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 â€“ ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts-error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts-success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Variables.

CURRENT_DIST=$(tail /etc/os-release | grep "VERSION_CODENAME=*" | rev | cut -d '=' -f 1 | rev)


# -- Mount the devices filesystem.

mount -t devtmpfs dev /dev


# -- Mount NX_HOME partition.
# -- When entering the chroot, only the root partition is mounted, but that's likely to not have enough storage.
# -- So, let's use the /home partition. We're discovering NX_HOME by the LABEL of the partition.

HOME_PARTITION=$(findfs LABEL=NX_HOME)

mount -t auto "$HOME_PARTITION" /home


#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		( -d | --debug )  set -x; shift;;
	esac
done


# -- Create the directories for nuts.
# -- Create working directories in /home since this partition will likely have more space than the root partition, as set in our custom partition layout and the instructions on the website.

if [[ ! -d "$NUTS_DIR_DLS" ]] && [[ ! -d "$NUTS_DIR_ISO" ]] && [[ ! -d "$NUTS_DIR_SQS" ]] && [[ ! -d "$NUTS_DIR_BAK" ]]; then
	puts-info "Creating working directories, continuing..."
	mkdir -p /home/.nuts/{backup,iso,squashfs}
else
	puts-info "Working directories exist, skipping..."
fi


# -- Verify the checksum of the backup file with the generated checksum file.
# -- Exit if checksum doesn't match.

BACKUP_SUM="$(md5sum "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" | cut -c -32)"
GEN_BAK_SUM="$(tail "$NUTS_DIR_BAK"/nuts-backup.md5sum | cut -c -32)"

if [[ "$BACKUP_SUM" == "$GEN_BAK_SUM" ]]; then
	puts-info "Backup checksum matches, continuing..."
else
	puts-error "Backup checksum does not match, quitting."
	exit 1
fi


# -- Mount the SquashFS.
# -- **ALWAYS** use the newest SquashFS in the directory. The user can't select which backup to restore.

mount "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" "$NUTS_DIR_SQS"


# -- Now comes the good part; proceed with running rsync and restore the backup.

puts-info "Restoring backup of ${CURRENT_DIST^n}, continuing..."

rsync --inplace --no-whole-file --no-compress -ahR \
	--exclude /dev/ \
	--exclude /etc/{fstab,shadow,sddm.conf} \
	--exclude /etc/sddm.conf.d/ \
	--exclude /home/ \
	--exclude /media/ \
	--exclude /proc/ \
	--exclude /run/ \
	--exclude /sys/ \
	--exclude /usr/bin/bash \
	--exclude /usr/bin/mount \
	--exclude /var/{cache,lib,local,lock,log,mail,opt,run,spool,tmp} \
	--progress --info=progress2 \
	"$NUTS_DIR_SQS" /
sync

puts-success "Success! Backup has been restored."


# -- Update GRUB.

update-grub


# -- Unmount the SquashFS.

umount "$NUTS_DIR_SQS"


# -- Unmount the devices filesystem.

umount /dev


# -- Unmount the /home partition.

umount /home


# -- Finalizing.
# -- Leave the Matri... I mean, the overlay.

exit

#   ====== END ======
