#!/bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#   Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>                                                                                                                 #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -e


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
TOOL_SHRT_NAME="nuts"
TOOL_VERSION="$(md5sum /usr/bin/nuts | cut -c -32)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Print informative messages to stdin.

puts_info() {
  printf "%s: \e[34mInfo:\e[0m %s\n\n" "$TOOL_NAME" "$*"
}


# -- Print success messages to stdin.

puts_success() {
  printf "%s: \e[32mSuccess:\e[0m %s\n\n" "$TOOL_NAME" "$*"
}


# -- Print error messages to stdin.

puts_error() {
  printf "%s: \e[31mError:\e[0m %b\n\n" "$TOOL_NAME" "$*"
}


# -- Print messages or text using multiple lines.

print_message() {
    local message="${1:-}"
    local output_stream="${2:-2}"

    printf "%b\n" "$message" >&"$output_stream"
}


# -- Display an error when no flag is used.

error () {
  puts_error "$TOOL_SHRT_NAME: \e[31mError:\e[0m: $*" >&2
  exit 1
}


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 – ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts_error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts_success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Check if this is running as root.
# -- Exit if not running as root.

if [ "$EUID" -ne 0 ]; then
    puts_error "%s is not running as root, quitting.\n" "$TOOL_NAME"
    exit 1
else
    puts_info "%s is running as root, continuing...\n" "$TOOL_NAME"
    ROOT=("sudo")
fi



# -- Functions.

dl_file() {
    local FILE_URL="$1"
    local FILE_NAME
	FILE_NAME="$(basename "$FILE_URL")"
    local FILE_PATH="/tmp/$FILE_NAME"

    if [ -f "$FILE_PATH" ]; then
        rm "$FILE_PATH"
    fi

    if ! command -v axel >/dev/null 2>&1; then
        return 1
    fi

    if ! curl --output /dev/null --silent --head --fail "$FILE_URL"; then
        return 1
    fi

    axel -o "/tmp" -n 10 "$FILE_URL"

    if [ $? -ne 0 ]; then
        return 1
    fi
}

overlay_ch() {
    local ROOT=("sudo" "overlayroot-chroot" "$@")

    if ! command -v "${ROOT[0]}" >/dev/null 2>&1; then
        printf "Error: '%s' command not found. Please make sure it's installed and try again.\n" "${ROOT[0]}"
        return 1
    fi

    "${ROOT[@]}"
}


# -- Use a log file.
# -- Everything below will go to the file nuts.log.

if [ -f "$NUTS_LOG" ]; then
	puts_info "$TOOL_NAME log file found, skipping..."
else
	puts_info "Unable to locate $TOOL_NAME log file."
fi


# -- Variables.

CURRENT_DIST=$(awk -F'=' '/VERSION_CODENAME/{print $NF}' /etc/os-release)
TARGET_DIST="nitrux"


#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		( -h | --help ) print_message \
			"$TOOL_NAME" \
			"" \
			"Description:" \
			"" \
			"    $TOOL_NAME or nuts is a utility to update the Nitrux Operating System and back up the root for rollbacks." \
			"    ⚠️ Important: nuts is intended to work exclusively in Nitrux OS, and using this utility in other distributions will break them or not work at all." \
			"" \
			"    Report bugs at: https://github.com/Nitrux/nuts/issues." \
			"" \
			"Flags:" \
			"    -h or --help         Show this help." \
			"    -v or --version      Show the version." \
			"    -d or --debug        Enable verbose output." \
			"" \
			"Operations:" \
			"    update       Update the currently installed root using the media specified in nuts-query and creates a backup of the current root directory." \
			"    restore      Restore the backup of the root directory generated during the update." \
			"" \
			"Usage:" \
			"    sudo nuts <flag> (operation)" \
			"" \
			"Examples:" \
			"    sudo nuts update" \
			"    sudo nuts -d restore" \

			exit;;

		( -v | --version )  print_message \
			"$TOOL_NAME — version: $TOOL_VERSION." \
			"" \
			"The license used for this file and its contents is: BSD-3-Clause." \
			"" \
			"Authors:" \
			"" \
			"    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>" \
			"    Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>" \
			"" \
			"(c) $FECHA Some Rights Reserved. Made by $VENDOR"

			exit;;

		( -d | --debug )  set -x; shift;;
	esac
done


( for cmd; do
	case "$cmd" in
		( '' )  error "No operation specified (use -h to see a list of operations).";;

		( update )

			# -- Step 0: Run checks before actually doing anything.

			# -- Ensure that this utility runs in Nitrux and has an Internet connection.
			# -- Exit if value is not 'nitrux'.

			if [ "$CURRENT_DIST" == "$TARGET_DIST" ]; then
				puts_success "This utility is running in ${TARGET_DIST^}. Continuing..."
			else
				puts_error "$TOOL_NAME is intended to work exclusively in ${TARGET_DIST^}. Using this utility in ${CURRENT_DIST^} will break it and not work at all. Quitting."
				exit 1
			fi


			# -- Check Internet connection but do nothing yet.
			# -- Exit if connection test fails.

			if ping -q -c 1 -W 1 nxos.org >/dev/null; then
				puts_success "This computer can reach the Internet. Continuing..."
			else
				puts_error "This computer cannot reach the Internet. Quitting."
				exit 1
			fi


			# -- Update process begins.
			# -- The update process is divided into two sub-processes, the first is backup, and the second is the actual update.

			# -- Verify that the build list exists.
			# -- Exit if it doesn't.

			if [ ! -f "/installed_pkgs_end.txt" ]; then
				puts_error "Build list not found. Quitting."
				exit 1
			else
				puts_info "Build list found. Continuing..."
			fi


			# -- Download the nuts-query file from our repository and then use the checksum listed in the file to compare their values.
			# -- This file is always downloaded to a temporary directory, as there's no reason to keep it.
			# -- Overwrite the file if it already exists.

			INFO_FILE="/tmp/nuts-query.info"
			REMOTE_URL="https://raw.githubusercontent.com/Nitrux/nuts/main/tmp/nuts-query.info"

			if [ ! -f "$INFO_FILE" ]; then
				puts_info "Can't find nuts-query.info, downloading..."
			else
				puts_info "Found nuts-query.info, overwriting..."
				rm -f "$INFO_FILE"
			fi

			dl_file "$REMOTE_URL" "$INFO_FILE"


			# -- Make the comparison.
			# -- This way, we know that the user is running this tool on an installation that can be upgraded; thus, this tool works as intended.
			# -- If the checksum matches, exit because the root is already current.
			# -- If the checksum doesn't match, then continue because the root is out of date or the list differs from the value in the query file.

			LOCAL_SUM=$(md5sum /installed_pkgs_end.txt | cut -c -32)
			REMOTE_SUM=$(tail /tmp/nuts-query.info | grep rootlistsum= | cut -c -44 | rev | cut -c -32 | rev)

			if [ "$LOCAL_SUM" == "$REMOTE_SUM" ]; then
				puts_info "The current installation of ${TARGET_DIST^} is up to date."
				exit 0
			else
				puts_info "Preparing to update ${TARGET_DIST^}, continuing..."
			fi


			# -- Step 1: Backup sub-process

			# -- This process begins as a step before doing an update.
			# -- Backup files are only generated when updating; the user can't ask the utility to create them on demand.
            # -- This process is done inside the chroot; otherwise, when using overlayroot-chroot, the files, and paths will not exist.


			# -- Step 2: Actual Update sub-process

			# -- This process is also done inside the chroot and it is the same as Calamares, except for user creation, mounts and bootloader configuration.
			# -- After using overlay_ch, it's essential to remember that **EVERY COMMAND IS RUNNING AS ROOT AND ON THE LOWER DIRECTORY OF THE OVERLAY**.


			OVERLAYROOT="/usr/sbin/overlayroot-chroot"

			if [ ! -f "$OVERLAYROOT" ]; then
				puts_error "Can't find overlayroot, quitting."
				exit 1
			else
				puts_info "Found overlayroot, continuing..."
			fi


			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-cru to perform the backup and update.
			# -- If the component and the configuration file don't exist in the chroot, download them.

			overlay_ch rm -r /usr/bin/nuts-cru || true
			overlay_ch axel -o /usr/bin -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/usr/bin/nuts-cru
			overlay_ch chmod +x /usr/bin/nuts-cru
			overlay_ch axel -o /etc -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/etc/nuts.conf
			overlay_ch axel -o /tmp -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/tmp/nuts-query.info
			overlay_ch nuts-cru


			# -- After running rsync reboot the device.

			puts_info "Time to reboot. Bye."

			shift;;


			# -- Update process ends.


		( restore )

			# -- Step 1: Restore Process

			# -- The restore process is the same as the Actual Update sub-process but using the backup SquashFS.
			# -- As before, this is done inside the chroot.

			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-crr to perform the restore actions inside the chroot.
			# -- If the component doesn't exist in the root, download it.

			overlay_ch rm -r /usr/bin/nuts-crr || true
			overlay_ch axel -o /usr/bin -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/usr/bin/nuts-crr
			overlay_ch chmod +x /usr/bin/nuts-crr
			overlay_ch axel -o /etc -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/etc/nuts.conf
			overlay_ch nuts-crr


			# -- After running rsync reboot the device.

			puts_info "Time to reboot. Bye."

			shift;;
	esac
done ) 2>&1 | tee -a "$NUTS_LOG"

#   ====== END ======
