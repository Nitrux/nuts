#! /bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#   Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>                                                                                                                 #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -e


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
TOOL_SHRT_NAME="nuts"
TOOL_VERSION="$(md5sum /usr/bin/nuts | cut -c -32)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Print informative messages to stdin.

puts-info () { printf "$TOOL_SHRT_NAME: \e[34mInfo:\e[0m %b\n\n" "$*"; }


# -- Print success messages to stdin.

puts-success () { printf "$TOOL_SHRT_NAME: \e[32mSuccess:\e[0m %b\n\n" "$*"; }


# -- Print error messages to stdin.

puts-error () { printf "$TOOL_SHRT_NAME: \e[31mError:\e[0m %b\n\n" "$*"; }


# -- Print messages or text using multiple lines.

puts-text () { printf "%b\n" "$@" >&2; }


# -- Display an error when no flag is used.

error () { printf "$TOOL_SHRT_NAME: \e[31mError:\e[0m %b\n\n" "$*" >&2; exit 1; }


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 – ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts-error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts-success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Check if this is running as root.
# -- Exit if not running as root.

if [ "$EUID" -ne 0 ]; then
	puts-error "$TOOL_NAME is not running as root, quitting."
	exit 1
else
	puts-info "$TOOL_NAME is running as root, continuing..."
	ROOT="sudo"
fi


# -- Functions.

dl_file () { axel -o /tmp -n 10 "$@"; }
overlay_ch () { $ROOT overlayroot-chroot "$@"; }
bak_cc () { $ROOT find "$NUTS_DIR_BAK" -maxdepth 1 -type f | head -n "$BACKUPS_TO_KEEP" | xargs --no-run-if-empty rm; }


# -- Use a log file.
# -- Everything below will go to the file nuts.log.

$ROOT touch "$NUTS_LOG"

if [[ ! -f $NUTS_LOG ]]; then
	puts-info "Creating $TOOL_NAME log file, continuing..."
	touch "$NUTS_LOG"
else
	puts-info "$TOOL_NAME log file found, skipping..."
fi


#   ====== START ======

# -- Flag parsing.

(
for cmd; do
	case "$cmd" in
		( -h | --help ) puts-text \
			"$TOOL_NAME" \
			"" \
			"Description:" \
			"" \
			"    $TOOL_NAME or nuts is a utility to update the Nitrux Operating System and back up the root for rollbacks." \
			"    ⚠️ Important: nuts is intended to work exclusively in Nitrux OS, and using this utility in other distributions will break them or not work at all." \
			"" \
			"    Report bugs at: https://github.com/Nitrux/nuts/issues." \
			"" \
			"Flags:" \
			"    -h or --help         Show this help." \
			"    -v or --version      Show the version." \
			"    -d or --debug        Enable verbose output." \
			"" \
			"Operations:" \
			"    update       Update the currently installed root using the media specified in nuts-query and creates a backup of the current root directory." \
			"    restore      Restore the backup of the root directory generated during the update." \
			"" \
			"Usage:" \
			"    sudo nuts <flag> (operation)" \
			"" \
			"Examples:" \
			"    sudo nuts update" \
			"    sudo nuts -d restore" \

			exit;;

		( -v | --version )  puts-text \
			"$TOOL_NAME — version: $TOOL_VERSION." \
			"" \
			"The license used for this file and its contents is: BSD-3-Clause." \
			"" \
			"Authors:" \
			"" \
			"    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>" \
			"    Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>" \
			"" \
			"(c) $FECHA Some Rights Reserved. Made by $VENDOR"

			exit;;

		( -d | --debug )  set -x; shift;;
	esac
done


for cmd; do
	case "$cmd" in
		( '' )  error "No operation specified (use -h to see a list of operations).";;

		( update )

			# -- Step 0: Run checks before actually doing anything.

			# -- Ensure that this utility runs in Nitrux and has an Internet connection.
			# -- Exit if value is not 'nitrux'.

			CURRENT_DIST=$(tail /etc/os-release | grep "VERSION_CODENAME=*" | rev | cut -d '=' -f 1 | rev)
			TARGET_DIST="nitrux"

			if [ "$CURRENT_DIST" == "$TARGET_DIST" ]; then
				puts-success "Success! This utility is running in ${TARGET_DIST^n}, continuing..."
			else
				puts-error "$TOOL_NAME is intended to work exclusively in ${TARGET_DIST^n}, and using this utility in ${CURRENT_DIST^} will break it and not work at all. Quitting."
				exit 1
			fi


			# -- Check internet connection but do nothing yet.
			# -- Exit if connection test fails.

			if ping -q -c 1 -W 1 nxos.org >/dev/null; then
				puts-success "Success! This computer can reach the internet, continuing..."
			else
				puts-error "This computer can't reach the internet, quitting."
				exit 1
			fi


			# -- Update process begins.
			# -- The update process is divided into two sub-processes, the first is backup, and the second is the actual update.

			# -- First create the directories for nuts.
			# -- Create working directories in /home since this partition will likely have more space than the root partition, as set in our custom partition layout and the instructions on the website.

			if [ ! -d "$NUTS_DIR_DLS" ] && [ ! -d "$NUTS_DIR_ISO" ] && [ ! -d "$NUTS_DIR_SQS" ] && [ ! -d "$NUTS_DIR_BAK" ]; then
				puts-info "Creating working directories, continuing..."
				$ROOT mkdir -p /home/.nuts/{iso,squashfs,backup}
			else
				puts-info "Working directories exist, skipping..."
			fi


			# -- Verify that the build list exists.
			# -- Exit if it doesn't.

			if [ ! -f "/installed_pkgs_end.txt" ]; then
				puts-error "Build list not found, quitting."
				exit 1
			else
				puts-info "Build list found, continuing..."
			fi


			# -- Download the nuts-query file from our repository and then use the checksum listed in the file to compare their values.
			# -- This file is always downloaded to a temporary directory, as there's no reason to keep it.
			# -- Overwrite the file if it already exists.

			if [ ! -f "/tmp/nuts-query.info" ]; then
				puts-info "Can't find nuts-query.info, downloading..."
				dl_file https://raw.githubusercontent.com/Nitrux/nuts/main/tmp/nuts-query.info
			else
				puts-info "Found nuts-query.info, overwriting..."
				rm -r \
					/tmp/nuts-query.info
				dl_file https://raw.githubusercontent.com/Nitrux/nuts/main/tmp/nuts-query.info
			fi


			# -- Make the comparison.
			# -- This way, we know that the user is running this tool on an installation that can be upgraded; thus, this tool works as intended.
			# -- If the checksum matches, exit because the root is already current.
			# -- If the checksum doesn't match, then continue because the root is out of date or the list differs from the value in the query file.

			LOCAL_SUM="$(md5sum /installed_pkgs_end.txt | cut -c -32)"
			REMOTE_SUM="$(tail /tmp/nuts-query.info | grep rootlistsum= | cut -c -44 | rev | cut -c -32 | rev)"

			if [ "$LOCAL_SUM" == "$REMOTE_SUM" ]; then
				puts-info "The current installation of ${TARGET_DIST^n} is up to date."
				exit 0
			else
				puts-info "Preparing to update ${TARGET_DIST^n}, continuing..."
			fi


			# -- Step 1: Backup sub-process

			# -- This process begins as a step before doing an update.
			# -- Backup files are only generated when updating; the user can't ask the utility to create them on demand.

			# -- Run the backup cleaner.
			# -- Only keep the amount of backups defined in nuts.conf.

			puts-info "Cleaning older backups, continuing..."
			bak_cc


			# -- Create the backup.
			# -- We assume that the /home partition is on an internal storage device (SATA or NVME), but one can never know, so run sync to flush the write cache.

			puts-info "Creating backup of ${CURRENT_DIST^n}, continuing..."

			$ROOT mksquashfs / "$NUTS_DIR_BAK"/nuts-backup-"$DATE_BACKUP_FILE".squashfs \
				-e /boot/* \
				-e /dev/* \
				-ef /etc/shadow \
				-e /home/ \
				-e /proc/ \
				-e /media/* \
				-e /run/* \
				-e /sys/* \
				-e /tmp/* \
				-e /var/{cache,lib,local,lock,log,mail,opt,run,spool,tmp}/ \
				-comp zstd \
				-Xcompression-level 22 \
				-no-progress \
				-b 1048576
			$ROOT md5sum "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" > "$NUTS_DIR_BAK"/nuts-backup.md5sum
			sync

			puts-success "Success! Backup has been created."


			# -- Step 2: Actual Update sub-process

			# -- This utility targets Nitrux version 2.6.0 and newer. However, aria2c is only included by default with version 2.9.0.
			# -- To use this utility in previous versions of Nitrux, we need to download a static binary.
			# -- So, first check if aria2c is available and download it if not.

			if [ -f "/usr/bin/aria2c" ]; then
				puts-success "Success! aria2c binary is found, skipping..."
			else
				puts-info "Can't find aria2c binary, downloading..."
				dl_file https://github.com/abcfy2/aria2-static-build/releases/download/1.36.0/aria2-x86_64-linux-musl_static.zip
				puts-info "Adding aria2c static binary, continuing..."
				$ROOT unzip /tmp/aria2-x86_64-linux-musl_static.zip -d /usr/bin
			fi


			# -- Download the ISO with aria2c using the BitTorrent protocol.
			# -- Check if the ISO already exists so it's not downloaded again. If an ISO file was downloaded then rename it.
			# -- However, If the ISO file found doesn't match the checksum, it will still cause the utility to exit at a later stage.
			# -- Use the magnet link from the query file.
			# -- Magnet link is provided by FOSS Torrents https://fosstorrents.com/distributions/nitrux/#downloads.

			if [ -f "$NUTS_DIR_DLS/nitrux.iso" ]; then
				puts-info "ISO file found, skipping..."
			else
				puts-info "ISO file not found! Dowloading ISO using aria2c, continuing..."
				MAGNET_LINK="$(tail /tmp/nuts-query.info | grep magnetlink= | rev | cut -d '=' -f -42 | rev)"
				$ROOT aria2c -d "$NUTS_DIR_DLS" --seed-time=0 "$MAGNET_LINK"
				$ROOT mv "$(echo "$NUTS_DIR_DLS"/nitrux-nx-desktop-plasma-*-amd64.iso | tr ' ' '\n' | tail -n 1)" "$NUTS_DIR_DLS"/nitrux.iso
			fi


			# -- Verify the checksum of the ISO. Use the checksum from the query file.
			# -- Exit if checksum doesn't match.

			LOCAL_ISO_SUM="$(md5sum "$NUTS_DIR_DLS"/nitrux.iso | cut -c -32)"
			DL_ISO_SUM="$(tail /tmp/nuts-query.info | grep isosum= | cut -c -44 | rev | cut -c -32 | rev)"

			if [ "$LOCAL_ISO_SUM" == "$DL_ISO_SUM" ]; then
				puts-info "ISO checksum matches, continuing..."
			else
				puts-error "ISO checksum does not match, quitting."
				rm "$NUTS_DIR_DLS"/nitrux.iso
				exit 1
			fi


			# -- This process is the same as Calamares, except for user creation, mount creation, and bootloader configuration.
			# -- After using overlay_ch, it's essential to remember that **EVERY COMMAND IS RUNNING AS ROOT AND ON THE LOWER DIRECTORY OF THE OVERLAY**.

			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-cru to perform the update actions inside the chroot.
			# -- If the component doesn't exist in the root, download it.

			overlay_ch axel -o /usr/bin -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/usr/bin/nuts-cru;
			overlay_ch chmod +x /usr/bin/nuts-cru;
			overlay_ch axel -o /etc -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/etc/nuts.conf;
			overlay_ch nuts-cru;


			# -- After running rsync reboot the device.

			puts-info "Time to reboot. Bye."
			shift;;


		( restore )

			# -- Restore Process
			# -- The restore process is the same as the Actual Update sub-process but using the backup SquashFS.

			# -- Verify the checksum of the backup file with the generated checksum file.
			# -- Exit if checksum doesn't match.

			BACKUP_SUM="$(md5sum "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" | cut -c -32)"
			GEN_BAK_SUM="$(tail "$NUTS_DIR_BAK"/nuts-backup.md5sum | cut -c -32)"

			if [ "$BACKUP_SUM" == "$GEN_BAK_SUM" ]; then
				puts-info "Backup checksum matches, continuing..."
			else
				puts-error "Backup checksum does not match, quitting."
				exit 1
			fi


			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-crr to perform the restore actions inside the chroot.
			# -- If the component doesn't exist in the root, download it.

			overlay_ch axel -o /usr/bin -c -n 10 https://raw.githubusercontent.com/Nitrux/nuts/main/usr/bin/nuts-crr
			overlay_ch chmod +x /usr/bin/nuts-crr
			overlay_ch nuts-crr


			# -- After running rsync reboot the device.

			puts-info "Time to reboot. Bye."
			shift;;
	esac
done
) 2>&1 | tee -a "$NUTS_LOG"

#   ====== END ======
