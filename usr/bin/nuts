#!/bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#   Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>                                                                                                                 #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -eu


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
TOOL_SHRT_NAME="nuts"
TOOL_VERSION="$(md5sum /usr/bin/nuts | cut -c -32)"
VENDOR='Nitrux Latinoamericana S.C.'
FECHA=$(date +%Y)


# -- Print informative messages to stderr.

puts_info() {
	if [ -n "$1" ]; then
		printf "%s: \e[34mInfo:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print success messages to stderr.

puts_success() {
	if [ -n "$1" ]; then
		printf "%s: \e[32mSuccess:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print error messages to stderr.

puts_error() {
	if [ -n "$1" ]; then
		printf "%s: \e[31mError:\e[0m %b\n" "$TOOL_NAME" "$*" >&2
	fi
}


# -- Print messages or text using multiple lines to stderr.

print_message() {
	if [ -n "$1" ]; then
		printf "%s\n" "$@" >&2
	fi
}


# -- Print warning messages to stderr.

puts_warning() {
    if [ -n "$1" ]; then
        printf "%s: \e[33mWarning:\e[0m %s\n" "$TOOL_NAME" "$*" >&2
    fi
}


# -- Check if this is running as root.
# -- Exit if not running as root.

if [ "$(id -u)" -ne 0 ]; then
	puts_error "$TOOL_NAME is not running as root, quitting."
	exit 1
else
	puts_success "$TOOL_NAME is running as root, continuing..."
	ROOT="sudo"
fi


# -- Check if any arguments are passed

if [ $# -eq 0 ]; then
    puts_error "No arguments provided to $TOOL_NAME, quitting."
    exit 1
fi


# -- Display an error when no flag is used.

error () {
  puts_error "$TOOL_SHRT_NAME: \e[31mError:\e[0m: $*" >&2
  exit 1
}


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 – ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts_error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts_success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Functions.

dl_file() {
    local FILE_URL="$1"
    local FILE_NAME
    FILE_NAME=$(basename "$FILE_URL")
    local FILE_PATH="/tmp/$FILE_NAME"

    [ -f "$FILE_PATH" ] && rm "$FILE_PATH"

    if ! command -v axel >/dev/null 2>&1; then
        puts_error "axel command not found, unable to download file."
        return 1
    fi

    if ! curl --output /dev/null --silent --head --fail "$FILE_URL"; then
        puts_error "File URL is not accessible, unable to download file."
        return 1
    fi

    if ! axel -o "/tmp" -n 10 "$FILE_URL"; then
        puts_error "Failed to download file."
        return 1
    fi
}

overlay_ch() {
    local ROOT=("sudo" "overlayroot-chroot" "$@")

    if ! command -v "${ROOT[0]}" >/dev/null 2>&1; then
        puts_error "Error: '${ROOT[0]}' command not found. Please make sure it's installed and try again."
        return 1
    fi

    "${ROOT[@]}"
}

unmount_directory() {
  local DIRECTORY="$1"

  if mountpoint -q "$DIRECTORY"; then
    puts_info "Unmounting: $DIRECTORY"
    umount "$DIRECTORY"
  else
    puts_info "Directory is not mounted: $DIRECTORY"
  fi
}


# -- Use a log file.
# -- Everything below will go to the file nuts.log.

if [ -f "$NUTS_LOG" ]; then
	puts_info "$TOOL_NAME log file found, skipping..."
else
	puts_info "Unable to locate $TOOL_NAME log file. Creating a new log file, continuing..."
fi


# -- Variables.

CURRENT_DIST=$(awk -F'=' '/VERSION_CODENAME/{print $NF}' /etc/os-release)
TARGET_DIST="nitrux"
OUTPUT_FILE=$(mktemp)

#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		-h | --help)
			print_message "$TOOL_NAME" \
				"" \
				"Description:" \
				"" \
				"    $TOOL_NAME or $TOOL_SHRT_NAME is a utility to update the Nitrux Operating System and back up the root for rollbacks." \
				"    ⚠️ Important: $TOOL_SHRT_NAME is intended to work exclusively in Nitrux OS, and using this utility in other distributions will break them or not work at all." \
				"" \
				"    Report bugs at: https://github.com/Nitrux/nuts/issues." \
				"" \
				"Flags:" \
				"    -h or --help         Show this help." \
				"    -v or --version      Show the version." \
				"    -d or --debug        Enable verbose output." \
				"" \
				"Operations:" \
				"    update       Update the currently installed root using the media specified in nuts-query and creates a backup of the current root directory." \
				"    restore      Restore the backup of the root directory generated during the update." \
				"    rescue       Restore the backup of the root partition in case of an interrupted update.." \
				"" \
				"Usage:" \
				"    sudo nuts <flag> (operation)" \
				"" \
				"Examples:" \
				"    sudo nuts update" \
				"    sudo nuts -d restore"
				
			exit
			;;

		-v | --version)
			print_message "$TOOL_NAME" \
				"" \
				"Version: $TOOL_VERSION." \
				"" \
				"The license used for this file and its contents is: BSD-3-Clause." \
				"" \
				"Authors:" \
				"" \
				"    Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>" \
				"    Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>" \
				"" \
				"(c) $FECHA Some Rights Reserved. Made by $VENDOR"

			exit
			;;

		-d | --debug)
			set -x
			shift
			;;
	esac
done


( for cmd; do
	case "$cmd" in
		'' )  error "No operation specified (use -h to see a list of operations).";;

		update )

			# -- Step 0: Run checks before actually doing anything.

			# -- Ensure that this utility runs in Nitrux and has an Internet connection.
			# -- Exit if value is not 'nitrux'.

			if [ "$CURRENT_DIST" == "$TARGET_DIST" ]; then
				puts_success "This utility is running in ${TARGET_DIST^}. Continuing..."
			else
				puts_error "$TOOL_NAME is intended to work exclusively in ${TARGET_DIST^}. Using this utility in ${CURRENT_DIST^} will break it and not work at all. Quitting."
				exit 1
			fi


			# -- Check Internet connection but do nothing yet.
			# -- Exit if connection test fails.

			if ping -q -c 1 -W 1 nxos.org >/dev/null && ping -q -c 1 -W 1 github.com >/dev/null; then
				puts_success "This computer can reach the Internet. Continuing..."
			else
				puts_error "This computer cannot reach the Internet. Quitting."
				exit 1
			fi


			# -- Update process begins.
			# -- The update process is divided into two sub-processes, the first is backup, and the second is the actual update.

			# -- Verify that the build list exists.
			# -- Exit if it doesn't.

			if [ ! -f "/installed_pkgs_end.txt" ]; then
				puts_error "Build list not found. Quitting."
				exit 1
			else
				puts_info "Build list found. Continuing..."
			fi


			# -- Download the nuts-query file from our repository and then use the checksum listed in the file to compare their values.
			# -- This file is always downloaded to a temporary directory, as there's no reason to keep it.
			# -- Overwrite the file if it already exists.

			INFO_FILE="/tmp/nuts-query.info"
			REMOTE_URL="https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/nuts-query.info"

			if [ ! -f "$INFO_FILE" ]; then
				puts_info "Can't find nuts-query.info, downloading..."
			else
				puts_info "Found nuts-query.info, overwriting..."
				rm -f "$INFO_FILE"
			fi

			dl_file "$REMOTE_URL" "$INFO_FILE" >/dev/null


			# -- Make the comparison.
			# -- This way, we know that the user is running this tool on an installation that can be upgraded; thus, this tool works as intended.
			# -- If the checksum matches, exit because the root is already current.
			# -- If the checksum doesn't match, then continue because the root is out of date or the list differs from the value in the query file.

			LOCAL_SUM=$(md5sum /installed_pkgs_end.txt | cut -c -32)
			REMOTE_SUM=$(tail /tmp/nuts-query.info | grep rootlistsum= | cut -c -44 | rev | cut -c -32 | rev)

			if [ "$LOCAL_SUM" == "$REMOTE_SUM" ]; then
				puts_info "The current installation of ${TARGET_DIST^} is up to date."
				exit 0
			else
				puts_info "Preparing to update ${TARGET_DIST^}, continuing..."
			fi


			# -- Create the directories for nuts.
			# -- Create working directories in /home since this partition will likely have more space than the root partition.

			DIRECTORIES=("$NUTS_DIR_BAK" "$NUTS_DIR_XFS" "$NUTS_DIR_ISO" "$NUTS_DIR_DLS" "$NUTS_DIR_SQS")

			for DIR in "${DIRECTORIES[@]}"; do
			if [[ ! -d "$DIR" ]]; then
				puts_error "Directory '$DIR' does not exist. Creating the directory..."
				if ! mkdir -p "$DIR"; then
				puts_error "Failed to create directory '$DIR'. Exiting..."
				exit 1
				fi
				puts_info "Directory '$DIR' created successfully."
			fi
			done

			puts_info "All required directories exist. Continuing."


			# -- Step 1: Backup sub-process

			# -- This process begins as a step before doing an update.
			# -- Backup files are only generated when updating; the user can't ask the utility to create them on demand.
			# -- This process is done inside the chroot; otherwise, when using overlayroot-chroot, the files, and paths will not exist.


			# -- Create a backup of the partition for redundancy using xfsdump to later use it during a rescue operation from a Live session.
			# -- By the way, only *one* backup file is created.
			# -- Compress the backup file using zstd.

			ROOT_PARTITION=$(findfs LABEL=NX_ROOT)
			ROOT_PARTITION_LABEL=$(blkid -o value -s LABEL "$ROOT_PARTITION")
			XFS_BACKUP_FILE="$NUTS_DIR_XFS/xfs-backup.xfs"
			COMPRESSED_XFS_BACKUP="$XFS_BACKUP_FILE.zst"
			ZSTD_COMP_THREADS=$(nproc)

			puts_info "Creating redundant backup of $ROOT_PARTITION_LABEL, continuing..."

			if [ -e "$XFS_BACKUP_FILE" ]; then
				puts_info "Deleting existing backup: $XFS_BACKUP_FILE, continuing..."
				rm -f "$XFS_BACKUP_FILE"
			else
				puts_info "Backup file not found: $XFS_BACKUP_FILE, creating it..."
				xfsdump -l0 -L "Nitrux_Update_Tool_System-XFS_Backup" -M "NX_BAK-Vol-1" -f "$XFS_BACKUP_FILE" "$ROOT_PARTITION"
			fi

			if [ -e "$COMPRESSED_XFS_BACKUP" ]; then
				puts_info "Deleting existing compressed backup: $COMPRESSED_XFS_BACKUP, continuing..."
				rm -f "$COMPRESSED_XFS_BACKUP"
			else
				puts_info "Compressed backup file not found: $COMPRESSED_XFS_BACKUP, creating it..."
				puts_info "Compressing $XFS_BACKUP_FILE, continuing..."
				zstd -T"$ZSTD_COMP_THREADS" --ultra -19 "$XFS_BACKUP_FILE" -o "$COMPRESSED_XFS_BACKUP"
			fi

			md5sum "$COMPRESSED_XFS_BACKUP" > "$NUTS_DIR_BAK/xfs-backup.md5sum"

			sync

			puts_success "Success! $ROOT_PARTITION_LABEL redundant backup has been created."


			# -- Step 2: Actual Update sub-process

			# -- This process is also done inside the chroot and it is the same as Calamares, except for user creation, mounts and bootloader configuration.
			# -- After using overlay_ch, it's essential to remember that **EVERY COMMAND IS RUNNING AS ROOT AND ON THE LOWER DIRECTORY OF THE OVERLAY**.


			OVERLAYROOT="/usr/sbin/overlayroot-chroot"

			if [ ! -f "$OVERLAYROOT" ]; then
				puts_error "Can't find overlayroot, quitting."
				exit 1
			else
				puts_info "Found overlayroot, continuing..."
			fi


			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-cru to perform the backup and update.
			# -- Always download the latest component.

			overlay_ch rm -f /usr/bin/nuts-cru >"$OUTPUT_FILE" 2>&1
			overlay_ch axel -o /usr/bin -c -n 10 "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/usr/bin/nuts-cru" >"$OUTPUT_FILE"
			overlay_ch axel -o /etc -c -n 10 "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/etc/nuts.conf" >"$OUTPUT_FILE"
			overlay_ch axel -o /tmp -c -n 10 "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/tmp/nuts-query.info" >"$OUTPUT_FILE"
			overlay_ch chmod +x /usr/bin/nuts-cru >"$OUTPUT_FILE"
			overlay_ch nuts-cru


			# -- After running rsync reboot the device.

			puts_info "Time to reboot. Bye."

			shift;;


			# -- Update process ends.


		restore )

			# -- Step 1: Restore Process

			# -- The restore process is the same as the Actual Update sub-process but using the backup SquashFS.

			# -- Enter the Matri... I mean, the overlay.
			# -- Run nuts-crr to perform the restore actions inside the chroot.
			# -- Always download the latest component.

			overlay_ch rm -r /usr/bin/nuts-crr >"$OUTPUT_FILE" 2>&1
			overlay_ch axel -o /usr/bin -c -n 10 "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/usr/bin/nuts-crr" >"$OUTPUT_FILE"
			overlay_ch axel -o /etc -c -n 10 "https://raw.githubusercontent.com/Nitrux/nuts/$NUTS_BRANCH/etc/nuts.conf" >"$OUTPUT_FILE"
			overlay_ch chmod +x /usr/bin/nuts-crr >"$OUTPUT_FILE"
			overlay_ch nuts-crr


			# -- After running rsync reboot the device.

			puts_info "Time to reboot. Bye."

			shift;;


		rescue )

			# -- Step X: Rescue Process

			# -- The Rescue Process is a special handling of an unforeseen event; as such, this <operation> does not require using overlayroot-chroot.

			# -- We do this because if, during the Actual Update sub-process with rsync, rsync is interrupted, the root will be in an inconsistent state.
			# -- That means the root is unusable, i.e., the user can't access the GUI or, worse, a TTY, so the user can't restore the SquashFS.
			# -- With that being the case, this <operation> allows the user to restore the root partition from a Live session.

			# -- Automatically check if this utility is running in a Live session. Calamares is an easy check as it's only available in a Live session.
			# -- This check assumes that the root is now inconsistent; thus, using the SquashFS backup is impossible, so we must restore the XFS backup hence why the user tells this utility to restore a backup from a Live session.
			# -- If the check returns that this utility is not running from a Live session, use the SquashFS backup instead.

			ROOT_PARTITION=$(findfs LABEL=NX_ROOT)
			ROOT_PARTITION_LABEL=$(blkid -o value -s LABEL "$ROOT_PARTITION")
			HOME_PARTITION=$(findfs LABEL=NX_HOME)
			HOME_PARTITION_LABEL=$(blkid -o value -s LABEL "$HOME_PARTITION")

			if mountpoint -q "/media/$USER/NX_ROOT"; then
				puts_info "/media/root is already mounted. Unmounting..."
				umount "/media/$USER/NX_ROOT"
			fi

			if mountpoint -q "/media/$USER/NX_HOME"; then
				puts_info "/media/home is already mounted. Unmounting..."
				umount "/media/$USER/NX_HOME"
			fi

			mkdir -p "/media/$USER/NX_ROOT" "/media/$USER/NX_HOME"

			puts_info "Mounting $ROOT_PARTITION_LABEL to /media/$USER/NX_ROOT..."
			mount -t auto "$ROOT_PARTITION" "/media/$USER/NX_ROOT"

			puts_info "Mounting $HOME_PARTITION_LABEL to /media/$USER/NX_HOME..."
			mount -t auto "$HOME_PARTITION" "/media/$USER/NX_HOME"

			COMPRESSED_XFS_BACKUP="/media/$USER/NX_HOME/$NUTS_DIR_XFS/xfs-backup.xfs.zst"
			XFS_BACKUP_CHECKSUM_FILE="/media/$USER/NX_HOME/$NUTS_DIR_XFS/xfs-backup.md5sum"
			DECOMPRESSED_XFS_BACKUP="/media/$USER/NX_HOME/$NUTS_DIR_XFS/xfs-backup.xfs"

			if [ ! -f "$COMPRESSED_XFS_BACKUP" ]; then
				puts_error "XFS backup file $COMPRESSED_XFS_BACKUP not found. Quitting."
				exit 1
			fi

			if [ ! -f "$XFS_BACKUP_CHECKSUM_FILE" ]; then
				puts_error "XFS backup checksum file $XFS_BACKUP_CHECKSUM_FILE not found. Quitting."
				exit 1
			fi

			BACKUP_SUM=$(md5sum "$COMPRESSED_XFS_BACKUP" | cut -c -32)
			GEN_BAK_SUM=$(tail "$XFS_BACKUP_CHECKSUM_FILE" | cut -c -32)

			if [[ "$BACKUP_SUM" == "$GEN_BAK_SUM" ]]; then
				puts_info "Backup checksum matches, continuing..."
			else
				puts_error "Backup checksum does not match, quitting."
				exit 1
			fi

			if [ -x "/usr/bin/calamares" ]; then
				puts_info "Running $TOOL_NAME from a Live session, proceed with restoration of $ROOT_PARTITION_LABEL, continuing..."
				zstd -dc "$COMPRESSED_XFS_BACKUP"
				xfsrestore -f "$DECOMPRESSED_XFS_BACKUP" "$ROOT_PARTITION"

				puts_success "Success! $ROOT_PARTITION_LABEL has been restored."

				unmount_directory /media/root
				unmount_directory /media/home
			else
				puts_warning "Only use this option from a Live session and in an emergency."
				puts_info "For a non-emergency situation, use: "$TOOL_SHRT_NAME restore"."

				unmount_directory /media/root
				unmount_directory /media/home
				exit 0
			fi

			# -- After restoring the XFS backup reboot the device.

			puts_info "Time to reboot. Bye."

			shift;;
	esac
done ) 2>&1 | tee -a "$NUTS_LOG"

#   ====== END ======
