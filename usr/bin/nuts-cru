#! /bin/bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#   Copyright <2023> <Luis Lavaire <luis_lavaire@nxos.org>>                                                                                                                 #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# -- Exit on errors.

set -xe


# -- Set program name and version.

TOOL_NAME="Nitrux Update System Tool"
TOOL_SHRT_NAME="nuts"


# -- Print informative messages to stdin.

puts-info () { printf "$TOOL_SHRT_NAME: \e[34mInfo:\e[0m %b\n\n" "$*"; }


# -- Print success messages to stdin.

puts-success () { printf "$TOOL_SHRT_NAME: \e[32mSuccess:\e[0m %b\n\n" "$*"; }


# -- Print error messages to stdin.

puts-error () { printf "$TOOL_SHRT_NAME: \e[31mError:\e[0m %b\n\n" "$*"; }


# -- Define the path of the nuts configuration file.

CONFIG_FILE="/etc/nuts.conf"


# -- Load values from configuration file.
# -- Include fix for SC1090 â€“ ShellCheck.

if [[ ! -f $CONFIG_FILE ]]; then
    puts-error "$TOOL_NAME configuration file not found!, quitting." 2>&1
    exit 1
else
	puts-success "Success! $TOOL_NAME configuration file found, continuing..."
	# shellcheck source=/dev/null
	. "$CONFIG_FILE"
fi


# -- Variables.

CURRENT_DIST=$(tail /etc/os-release | grep "VERSION_CODENAME=*" | rev | cut -d '=' -f 1 | rev)


# -- Functions.

dl_file () { axel -q -o /tmp -n 10 "$@"; }
bak_cc () { find "$NUTS_DIR_BAK" -maxdepth 1 -type f | head -n "$BACKUPS_TO_KEEP" | xargs --no-run-if-empty rm; }


# -- Mount the devices filesystem.

mount -t devtmpfs dev /dev


# -- Mount NX_HOME partition.
# -- When entering the chroot, only the root partition is mounted, but that's likely to not have enough storage.
# -- So, let's use the /home partition. We're discovering NX_HOME by the LABEL of the partition.

HOME_PARTITION=$(findfs LABEL=NX_HOME)

mount -t auto "$HOME_PARTITION" /home


#   ====== START ======

# -- Flag parsing.

for cmd; do
	case "$cmd" in
		( -d | --debug )  set -x; shift;;
	esac
done


# -- Create the directories for nuts.
# -- Create working directories in /home since this partition will likely have more space than the root partition, as set in our custom partition layout and the instructions on the website.

if [[ ! -d "$NUTS_DIR_DLS" ]] && [[ ! -d "$NUTS_DIR_ISO" ]] && [[ ! -d "$NUTS_DIR_SQS" ]] && [[ ! -d "$NUTS_DIR_BAK" ]]; then
	puts-info "Creating working directories, continuing..."
	mkdir -p /home/.nuts/{backup,iso,squashfs}
else
	puts-info "Working directories exist, skipping..."
fi


# -- Run the backup cleaner.
# -- Only keep the amount of backups defined in nuts.conf.

puts-info "Cleaning older backups, continuing..."
bak_cc


# -- Create the backup.
# -- We assume that the /home partition is on an internal storage device (SATA or NVME), but one can never know, so run sync to flush the write cache.

puts-info "Creating backup of ${CURRENT_DIST^n}, continuing..."

mksquashfs / "$NUTS_DIR_BAK"/nuts-backup-"$DATE_BACKUP_FILE".squashfs \
	-e /boot/* \
	-e /dev/* \
	-ef /etc/shadow \
	-e /home/ \
	-e /proc/ \
	-e /media/* \
	-e /run/* \
	-e /sys/* \
	-e /tmp/* \
	-e /var/{cache,lib,local,lock,log,mail,opt,run,spool,tmp}/ \
	-comp zstd \
	-Xcompression-level 22 \
	-no-progress \
	-b 1048576
md5sum "$(echo "$NUTS_DIR_BAK"/nuts-backup-*.squashfs | tr ' ' '\n' | tail -n 1)" > "$NUTS_DIR_BAK"/nuts-backup.md5sum
sync

puts-success "Success! Backup has been created."


# -- This utility targets Nitrux version 2.8.0 and newer. However, aria2c is only included by default with version 2.9.0.
# -- To use this utility in previous versions of Nitrux, we need to download a static binary.
# -- So, first check if aria2c is available and download it if not.

if [[ -f "/usr/bin/aria2c" ]]; then
	puts-success "Success! aria2c binary is found, skipping..."
else
	puts-info "Can't find aria2c binary, downloading..."
	dl_file https://github.com/abcfy2/aria2-static-build/releases/download/1.36.0/aria2-x86_64-linux-musl_static.zip
	puts-info "Adding aria2c static binary, continuing..."
	unzip /tmp/aria2-x86_64-linux-musl_static.zip -d /usr/bin
fi


# -- Download the ISO with aria2c using the BitTorrent protocol.
# -- Check if the ISO already exists so it's not downloaded again. If an ISO file was downloaded then rename it.
# -- However, If the ISO file found doesn't match the checksum, it will still cause the utility to exit at a later stage.
# -- Use the magnet link from the query file.
# -- Magnet link is provided by FOSS Torrents https://fosstorrents.com/distributions/nitrux/#downloads.

if [[ -f "$NUTS_DIR_DLS/nitrux.iso" ]]; then
	puts-info "ISO file found, skipping..."
else
	puts-info "ISO file not found! Dowloading ISO using aria2c, continuing..."
	MAGNET_LINK="$(tail /tmp/nuts-query.info | grep magnetlink= | rev | cut -d '=' -f -42 | rev)"
	aria2c -d "$NUTS_DIR_DLS" --log-level=warn --seed-time=0 "$MAGNET_LINK"
	mv "$(echo "$NUTS_DIR_DLS"/nitrux-nx-desktop-plasma-*-amd64.iso | tr ' ' '\n' | tail -n 1)" "$NUTS_DIR_DLS"/nitrux.iso
fi


# -- Verify the checksum of the ISO. Use the checksum from the query file.
# -- Exit if checksum doesn't match.

LOCAL_ISO_SUM="$(md5sum "$NUTS_DIR_DLS"/nitrux.iso | cut -c -32)"
DL_ISO_SUM="$(tail /tmp/nuts-query.info | grep isosum= | cut -c -44 | rev | cut -c -32 | rev)"

if [[ "$LOCAL_ISO_SUM" == "$DL_ISO_SUM" ]]; then
	puts-info "ISO checksum matches, continuing..."
else
	puts-error "ISO checksum does not match, quitting."
	rm "$NUTS_DIR_DLS"/nitrux.iso
	exit 1
fi


# -- Mount the ISO and the SquashFS.

mount "$NUTS_DIR_DLS"/nitrux.iso "$NUTS_DIR_ISO"
mount "$NUTS_DIR_ISO"/casper/filesystem.squashfs "$NUTS_DIR_SQS"


# -- Now comes the good part; proceed with running rsync and update the current installation.

puts-info "Updating ${CURRENT_DIST^n}, continuing..."

rsync --inplace --no-whole-file --no-compress -ahR \
	--exclude /dev/ \
	--exclude /etc/{fstab,shadow,sddm.conf} \
	--exclude /etc/sddm.conf.d/ \
	--exclude /home/ \
	--exclude /media/ \
	--exclude /proc/ \
	--exclude /run/ \
	--exclude /sys/ \
	--exclude /usr/bin/bash \
	--exclude /usr/bin/mount \
	--exclude /var/{cache,lib,local,lock,log,mail,opt,run,spool,tmp} \
	--progress --info=progress2 \
	"$NUTS_DIR_SQS" /
sync

puts-success "Success! Update has been applied."


# -- Update GRUB.

update-grub


# -- Unmount the ISO and the SquashFS.

umount "$NUTS_DIR_SQS"
umount "$NUTS_DIR_ISO"


# -- Unmount the devices filesystem.

umount /dev


# -- Unmount the /home partition.

umount /home


# -- Do a cleanup of the synced root.

puts-info "Calling the $TOOL_NAME Cleanup Crew, continuing..."
dl_file https://raw.githubusercontent.com/Nitrux/nuts/main/tmp/nuts-cc
chmod +x /tmp/nuts-cc && bash /tmp/nuts-cc


# -- Finalizing.
# -- Leave the Matri... I mean, the overlay.

rm -r \
	/tmp//nuts-cc \
	"$NUTS_DIR_DLS"/nitrux.iso

exit

#   ====== END ======
